#version 430

in vec3 position;
in flat vec4 start_fs;
in flat vec4 end_fs;
in flat vec4 tp2;
in flat vec4 tp3;
in vec4 color_start_fs;
in vec4 color_end_fs;

layout (location = 0) out vec4 frag_color;
layout (location = 1) out vec3 frag_position;
layout (location = 2) out vec3 frag_normal;

vec3 ortho_vec(vec3 v) {

	return abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0f) : vec3(0.0f, -v.z, v.y);
}

void main()
{ 
	vec3 dir = normalize(position);

	// The MIT License
	// Copyright © 2018 Inigo Quilez
	// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
	// and associated documentation files (the "Software"), to deal in the Software without restriction,
	// including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
	// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
	// subject to the following conditions: The above copyright notice and this permission notice shall be
	// included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS",
	// WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
	// OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
	// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	// OTHER DEALINGS IN THE SOFTWARE.
	
	// Rounded cone intersection from: https://www.shadertoy.com/view/MlKfzm

	float ra = start_fs.w;
	float rb = end_fs.w;

    vec3  ba = end_fs.xyz - start_fs.xyz;
	vec3  oa = -start_fs.xyz;
	vec3  ob = -end_fs.xyz;
    float rr = ra - rb;
    float m0 = dot(ba,ba);
    float m1 = dot(ba,oa);
    float m2 = dot(ba,dir);
    float m3 = dot(dir,oa);
    float m5 = dot(oa,oa);
	float m6 = dot(ob,dir);
    float m7 = dot(ob,ob);
    
    float d2 = m0-rr*rr;
    
	float k2 = d2    - m2*m2;
    float k1 = d2*m3 - m1*m2 + m2*rr*ra;
    float k0 = d2*m5 - m1*m1 + m1*rr*ra*2.0 - m0*ra*ra;
    
	float h = k1*k1 - k0*k2;

	if(h < 0.0) {
		discard;
		return;
	}

    float t = (-sqrt(h)-k1) / k2;

	float y = m1 - ra*rr + t*m2;
    
    if(y > 0.0 && y < d2) {
		frag_color = mix(color_start_fs, color_end_fs, y / d2);
		frag_position = t*dir;
		frag_normal = 0.5 * (normalize(d2*(oa + t*dir) - ba*y)) + 0.5;

		vec4 v_eye = vec4(t*dir, 1.0);
		float depth = dot(tp2, v_eye);
		float depth_w = dot(tp3, v_eye);
		gl_FragDepth = 0.5*(depth / depth_w) + 0.5;
    } else {
		float h1 = m3*m3 - m5 + ra*ra;
		float h2 = m6*m6 - m7 + rb*rb;

		vec4 r = vec4(1e20);
		float cm = 0.0;
		bool hit = false;

		if(h1 > 0.0) {
    		t = -m3 - sqrt(h1);
			r = vec4(t, (oa + t*dir) / ra);
			hit = true;
		}

		if(h2 > 0.0) {
    		t = -m6 - sqrt(h2);
			if(t < r.x) {
				cm = 1.0;
				r = vec4(t, (ob + t*dir) / rb);
				hit = true;
			}
		}
    
		if(hit) {
			frag_color = mix(color_start_fs, color_end_fs, cm);
			frag_position = r.x*dir;
			frag_normal = 0.5 * r.yzw + 0.5;

			vec4 v_eye = vec4(r.x*dir, 1.0);
			float depth = dot(tp2, v_eye);
			float depth_w = dot(tp3, v_eye);
			gl_FragDepth = 0.5*(depth / depth_w) + 0.5;
		} else {
			discard;
		}
	}
}