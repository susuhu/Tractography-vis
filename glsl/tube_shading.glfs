#version 430

#define ENABLE_AMBIENT_OCCLUSION 0

//***** begin interface of fragment.glfs ***********************************
uniform float gamma = 2.2;
void finish_fragment(vec4 color);
//***** end interface of fragment.glfs ***********************************

//***** begin interface of surface.glsl ***********************************
vec4 compute_reflected_appearance(vec3 position_eye, vec3 normal_eye, vec4 color, int side);
//***** end interface of surface.glsl ***********************************

layout (binding = 0) uniform sampler2D albedo_tex;
layout (binding = 1) uniform sampler2D position_tex;
layout (binding = 2) uniform sampler2D normal_tex;
layout (binding = 3) uniform sampler3D density_tex;
layout (binding = 4) uniform sampler2D depth_mipmap;

// Ambient occlusion parameters
uniform float ao_offset;
uniform float ao_distance;
uniform float ao_strength;
uniform vec3 density_tex_offset;
uniform vec3 density_tex_scaling;
uniform vec3 tex_coord_scaling;
uniform float texel_size;
uniform float cone_angle_factor;
uniform vec3 sample_dirs[3];

uniform mat4 inverse_modelview_mat;
uniform mat3 inverse_normal_mat;

uniform ivec2 viewport_dims;

in vec2 texcoord_fs;

layout (location = 0) out vec4 frag_color;

vec3 ortho_vec(vec3 v) {

	return abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0f) : vec3(0.0f, -v.z, v.y);
}

void main()
{
	vec4 color = texture(albedo_tex, texcoord_fs);
	vec3 pos_eye = texture(position_tex, texcoord_fs).xyz;
	vec3 normal_eye = 2.0 * texture(normal_tex, texcoord_fs).xyz - 1.0;

	if(color.r == 1.0 && color.g == 1.0 && color.b == 1.0) {
		finish_fragment(color);
		return;
	}

#if ENABLE_AMBIENT_OCCLUSION == 1
	vec3 pos = (inverse_modelview_mat * vec4(pos_eye, 1.0)).xyz;
	vec3 normal = normalize(inverse_normal_mat * normal_eye);

	// Do voxel cone tracing to determine occlusion of ambient light
	float ao = 0.0;

	vec3 new_y = normal;
	vec3 new_x = cross(new_y, normalize(pos));
	vec3 new_z = cross(new_x, new_y);

	mat3 R = mat3(new_x, new_y, new_z);

	for(int i = 0; i < 3; ++i) {
		vec3 sd = R * sample_dirs[i];

		float sample_distance = ao_offset + 0.001;
		vec3 normalized_pos = (pos - density_tex_offset) * density_tex_scaling;
		float lod_texel_size = 0.0f;
			
		float illumination = 1.0;

		do {
			// Get cone base radius at current distance and then the according mipmap sample level
			float cone_radius = sample_distance * cone_angle_factor;
			float sample_level = clamp(log2(cone_radius / texel_size), 0.0, 7.0);

			lod_texel_size = pow(2.0, sample_level) * texel_size;

			vec3 sample_pos = normalized_pos + sample_distance * sd * tex_coord_scaling;
			float density = textureLod(density_tex, sample_pos, sample_level).r;
			// Apply the compositing function
			illumination *= 1.0 - density * illumination;
			
			// Get the next sample distance and position
			sample_distance += cone_radius;
		} while(sample_distance < ao_distance - lod_texel_size && illumination > 0.02);

		ao += (1.0 - illumination);
	}

	float ao_factor = 1.0 - clamp(ao_strength * ao / 3.0, 0.0, 1.0);
	color *= ao_factor;
#endif

	color.rgb = compute_reflected_appearance(pos_eye, normal_eye, vec4(color.rgb, 1.0), 1).rgb;
	
	finish_fragment(color);
}