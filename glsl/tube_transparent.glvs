#version 430 

//***** begin interface of group.glsl ***********************************
vec4 group_color(in vec4 color, int group_index);
vec3 group_transformed_position(in vec3 position, int group_index);
vec3 group_transformed_normal(in vec3 nml, int group_index);
void right_multiply_group_normal_matrix(inout mat3 NM, int group_index);
void right_multiply_group_position_matrix(inout mat4 PM, int group_index);
void right_multiply_group_normal_matrix_and_rotation(inout mat3 NM, int group_index, vec4 rotation);
void right_multiply_group_position_matrix_and_rigid(inout mat4 PM, int group_index, vec4 rotation, vec3 translation);
//***** end interface of group.glsl ***********************************

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

uniform bool use_global_radius;
uniform float radius;
uniform float radius_scale;
uniform float alpha_scale;

struct pos3 {
	float x;
	float y;
	float z;
};

layout (std430, binding = 0) readonly buffer position_buffer {
    pos3 in_positions[];
};

layout (std430, binding = 1) readonly buffer radius_buffer {
    float in_radii[];
};

layout (std430, binding = 2) readonly buffer color_buffer {
    vec4 in_colors[];
};

out flat int vertex_id;
out vec4 color_gs;

void main()
{
	vertex_id = gl_VertexID;
	pos3 p = in_positions[vertex_id];
	vec3 pos = vec3(p.x, p.y, p.z);

	vec3 test_pos = pos;
	test_pos.x = abs(test_pos.x);

	vec4 c = in_colors[vertex_id];
	
	float alpha_factor = alpha_scale;

	float r = use_global_radius ? radius : in_radii[vertex_id];
	
	alpha_factor = mix(alpha_factor, 1.0, alpha_scale);
	
	color_gs = alpha_factor * c.a * vec4(c.r, c.g, c.b, 1.0); // Front-to-back blending
	
	gl_Position = vec4(pos, radius_scale * r);
}
